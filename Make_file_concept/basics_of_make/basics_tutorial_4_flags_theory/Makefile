# Make Execution Flags (Used in Terminal)
# Flags that modify how make runs
# 	make -j4  # Run 4 jobs in parallel (faster build)
# 	make -k   # Continue even if some targets fail
# 	make -d   # Debug mode (detailed output)
# 	make -n   # Show commands **without** executing them
# 	make -B   # Force rebuild of all targets
# 	make -C dir/  # Run make inside a specific directory


#CFLAGS
# A).CFLAGS about warnings........................................  
# 	Basics Warning Flags
# 		0.-Wall → Enables most warnings (helps catch errors).
# 		1.-Wextra → Enables additional warnings beyond -Wall.
# 		2.-Wpedantic → Enforces strict compliance with the language standard.
# 		3.-Werror → Treats warnings as errors, preventing compilation if warnings exist.
# 		4.-Wshadow → Warns if a variable declaration shadows another variable.
# 		5.-Wunused-variable → Warns about declared but unused variables.
# 		6.-Wconversion → Warns about implicit type conversions that may cause precision loss.
# 		7.-Wfloat-equal → Warns when comparing floating-point values directly (which can be unreliable).
# 		8.-Wformat → Checks format specifiers in functions like printf() and scanf().
# 		9.-Wsign-compare → Warns when signed and unsigned values are compared.
# 		10.-Wuninitialized → Warns about uninitialized variables that may cause undefined behavior
#	Advanced Warning Flags
#		1.-Wstrict-aliasing → Warns about potential aliasing violations that can cause unpredictable behavior.
#		2.-Wnull-dereference → Warns when a pointer is dereferenced before being checked for NULL.
#		3.-Wpointer-arith → Warns about suspicious pointer arithmetic.
#		4.-Wstack-usage=SIZE → Warns if a function uses more than SIZE bytes of stack space.
#		5.-Wunsafe-loop-optimizations → Warns about loops that may not behave as expected under optimization
# B).CFLAGS about Optimization.........................................
# 	1.-O0 → No optimization (default). Best for debugging.
# 	2.-O1 → Basic optimizations for speed and efficiency.
# 	3.-O2 → More aggressive optimizations without sacrificing stability.
# 	4.-O3 → Enables all -O2 optimizations plus additional ones for performance.
# 	5.-Ofast → Maximum optimization, but may break strict standards compliance.
# 	6.-Os → Optimizes for size, reducing binary footprint.
# 	7.-Og → Optimizes while keeping debugging easy.
# C).CFLAGS about Optimization.........................................
# 	-g → Includes debugging symbols for gdb.
#	-g0 → No debugging information (default).
#	-g1 → Minimal debugging info (basic symbols).
#	-g2 → Standard debugging info (default level).
#	-g3 → Maximum debugging info (includes macro definitions).
#CXXFLAGS
#	-std=c++11 → Specifies C++11 standard.
